basePath: /
definitions:
  model.Lyrics:
    properties:
      id:
        type: integer
      song_id:
        type: integer
      text:
        type: string
      verse_number:
        type: integer
    required:
    - song_id
    - text
    - verse_number
    type: object
  model.Song:
    properties:
      group:
        type: string
      id:
        type: integer
      link:
        type: string
      release_date:
        type: string
      song_name:
        type: string
    required:
    - group
    - song_name
    type: object
  model.UpdateSongInput:
    properties:
      group:
        type: string
      song_name:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Server for SongLibrary Application
  title: SongLibrary API
  version: "1.0"
paths:
  /api/songs:
    get:
      consumes:
      - application/json
      description: get songs with filter
      operationId: get-songs-with-filter
      parameters:
      - description: Filter by group
        in: query
        name: group
        type: string
      - description: Filter by song name
        in: query
        name: song
        type: string
      - description: Limit of records
        in: query
        name: limit
        required: true
        type: integer
      - description: Records offset
        in: query
        name: offset
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Song'
            type: array
      summary: GetAllSongsWithFilter
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: create song
      operationId: create-song
      parameters:
      - description: song info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateSongInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: CreateSong
      tags:
      - songs
  /api/songs/{id}:
    delete:
      consumes:
      - application/json
      description: delete song by id
      operationId: delete-song-by-id
      parameters:
      - description: Song id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Song'
      summary: DeleteSong
      tags:
      - songs
    get:
      consumes:
      - application/json
      description: get song by id
      operationId: get-song-by-id
      parameters:
      - description: Song id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Song'
      summary: GetSongById
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: update song
      operationId: update-song
      parameters:
      - description: Song id
        in: path
        name: id
        required: true
        type: string
      - description: song info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateSongInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: UpdateSong
      tags:
      - songs
  /api/songs/{id}/lyrics:
    get:
      consumes:
      - application/json
      description: get song lyrics
      operationId: get-song-lyrics
      parameters:
      - description: Song id
        in: path
        name: id
        required: true
        type: string
      - description: Limit of records
        in: query
        name: limit
        required: true
        type: integer
      - description: Records offset
        in: query
        name: offset
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Lyrics'
            type: array
      summary: GetSongLyrics
      tags:
      - songs
swagger: "2.0"
